datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ==============================================
// MODÈLES CORE
// ==============================================

model User {
  id               String              @id @default(cuid())
  name             String              @unique
  email            String
  emailVerified    Boolean
  image            String?
  role             Roles               @default(utilisateur)
  abonnement       Abonnement?
  plan             Plan                @default(free)
  clientId         String?             @unique
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime
  updatedAt        DateTime
  sessions         Session[]
  accounts         Account[]
  presences        Presence[]
  statsJoueur      StatistiqueJoueur[]

  // Relations améliorées
  MembreEquipe     MembreEquipe[]
  demandesAdhesion DemandeAdhesion[]
  blessures        Blessure[]
  finances         Finance[]

  // Système de favoris simplifié
  joueursFavoris User[]   @relation("JoueursFavoris")
  favorisPar     User[]   @relation("JoueursFavoris")
  clubsFavoris   Equipe[] @relation("ClubsFavoris")

  // Relations sondages
  sondagesCrees    Sondage[]
  reponsesSondages ReponseSondage[]

  @@unique([email])
  @@map("user")
}

model Equipe {
  id             String   @id @default(cuid())
  nom            String
  description    String?
  logoUrl        String?
  dateCreation   DateTime @default(now())
  codeInvitation String?

  statut StatutClub @default(PUBLIC)
  niveau NiveauClub @default(LOISIR)

  // Relations
  MembreEquipe MembreEquipe[]
  evenements   Evenement[]
  statsEquipe  StatistiqueEquipe[]
  demandes     DemandeAdhesion[]
  finances     Finance[]
  blessures    Blessure[]
  sondages     Sondage[]

  // Relation inverse pour les favoris
  dansFavorisDe User[] @relation("ClubsFavoris")

  @@map("equipe")
}

// ==============================================
// MODÈLES DE RELATIONS ET FONCTIONNALITÉS
// ==============================================

model MembreEquipe {
  id         String       @id @default(cuid())
  role       RoleEquipe   @default(JOUEUR)
  poste      PosteJoueur?
  isLicensed Boolean      @default(false)
  joinedAt   DateTime     @default(now())

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade
  userId   String
  equipe   Equipe @relation(fields: [equipeId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade
  equipeId String

  @@map("MembreEquipe")
  @@unique([userId, equipeId])
}

model DemandeAdhesion {
  id         String        @id @default(cuid())
  poste      PosteJoueur
  motivation String
  dispo      String?
  statut     StatutDemande @default(EN_ATTENTE)
  createdAt  DateTime      @default(now())

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade
  userId   String
  equipe   Equipe @relation(fields: [equipeId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade
  equipeId String

  @@map("demande_adhesion")
}

model Blessure {
  id          String   @id @default(cuid())
  type        String
  description String?
  startDate   DateTime
  endDate     DateTime
  isRecurring Boolean  @default(false)

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade
  userId   String
  equipe   Equipe @relation(fields: [equipeId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade
  equipeId String

  @@map("blessure")
}

model Finance {
  id           String      @id @default(cuid())
  montant      Float
  type         TypeFinance
  description  String
  isPaid       Boolean     @default(false)
  dateEcheance DateTime?

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade
  userId   String
  equipe   Equipe @relation(fields: [equipeId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade
  equipeId String

  @@map("finance")
}

model Evenement {
  id            String        @id @default(cuid())
  titre         String
  description   String?
  lieu          String?
  typeEvenement TypeEvenement @default(ENTRAINEMENT)
  dateDebut     DateTime
  dateCreation  DateTime      @default(now())

  adversaire   String?
  locationData Json?
  weatherData  Json?

  equipe      Equipe              @relation(fields: [equipeId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade
  equipeId    String
  presences   Presence[]
  statsJoueur StatistiqueJoueur[]
  statEquipe  StatistiqueEquipe?

  @@index([equipeId])
  @@map("evenement")
}

// ==============================================
// MODÈLES SONDAGES
// ==============================================

model Sondage {
  id        String    @id @default(cuid())
  question  String
  options   String[]
  isMulti   Boolean   @default(false)
  expiresAt DateTime?
  createdAt DateTime  @default(now())

  createur   User   @relation(fields: [createurId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade
  createurId String
  equipe     Equipe @relation(fields: [equipeId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade
  equipeId   String

  reponses ReponseSondage[]

  @@map("sondage")
}

model ReponseSondage {
  id        String   @id @default(cuid())
  choix     String
  createdAt DateTime @default(now())

  utilisateur   User    @relation(fields: [utilisateurId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade
  utilisateurId String
  sondage       Sondage @relation(fields: [sondageId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade
  sondageId     String

  @@map("reponse_sondage")
}

// ==============================================
// MODÈLES EXISTANTS (CONSERVÉS)
// ==============================================

model Abonnement {
  id        String         @id @default(cuid())
  userId    String         @unique
  plan      Plan
  periode   PlanAbonnement
  datedebut DateTime       @default(now())
  datefin   DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade

  @@map("abonnement")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Presence {
  id           String         @id @default(cuid())
  statut       StatutPresence @default(EN_ATTENTE)
  dateCreation DateTime       @default(now())

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade
  userId      String
  evenement   Evenement @relation(fields: [evenementId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade
  evenementId String

  @@unique([userId, evenementId])
  @@map("presence")
}

model StatistiqueJoueur {
  id              String      @id @default(cuid())
  buts            Int         @default(0)
  passesdécisive Int         @default(0)
  note            Float       @default(6.0)
  minutesJouees   Int         @default(0)
  titulaire       Boolean     @default(false)
  poste           PosteJoueur
  dateCreation    DateTime    @default(now())

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade
  userId      String
  evenement   Evenement @relation(fields: [evenementId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade
  evenementId String

  @@unique([userId, evenementId])
  @@map("statistique_joueur")
}

model StatistiqueEquipe {
  id String @id @default(cuid())

  resultatMatch ResultatMatch
  butsMarques   Int           @default(0)
  butsEncaisses Int           @default(0)
  cleanSheet    Boolean       @default(false)
  tirsTotal     Int?
  tirsCadres    Int?

  domicile     Boolean     @default(true)
  competition  competition @default(CHAMPIONNAT)
  adversaire   String
  dateCreation DateTime    @default(now())

  equipe      Equipe     @relation(fields: [equipeId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade
  equipeId    String
  evenement   Evenement? @relation(fields: [evenementId], references: [id], onDelete: Cascade) // <-- AJOUT: Suppression en cascade
  evenementId String?    @unique

  @@index([equipeId])
  @@map("statistique_equipe")
}

// ==============================================
// ENUMS
// ==============================================

// Existants
enum Roles {
  Admin
  utilisateur
}

enum Plan {
  free
  pro
}

enum PlanAbonnement {
  mois
  année
}

enum RoleEquipe {
  SANSCLUB
  ENTRAINEUR
  JOUEUR
}

enum PosteJoueur {
  GARDIEN
  DEFENSEUR
  MILIEU
  ATTAQUANT
}

enum TypeEvenement {
  MATCH
  ENTRAINEMENT
}

enum StatutPresence {
  EN_ATTENTE
  PRESENT
  ABSENT
  INCERTAIN
}

enum ResultatMatch {
  VICTOIRE
  DEFAITE
  MATCH_NUL
}

enum competition {
  CHAMPIONNAT
  COUPE
}

// Nouveaux enums
enum StatutClub {
  PUBLIC
  PRIVE
  INVITATION
}

enum NiveauClub {
  DEPARTEMENTAL
  REGIONAL
  NATIONAL
  LOISIR
}

enum StatutDemande {
  EN_ATTENTE
  ACCEPTEE
  REFUSEE
}

enum TypeFinance {
  COTISATION
  DEPENSE
}
